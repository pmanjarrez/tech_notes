GIT

CONFIGURATIONS
INITIATE A REPOSITORY
WORKING WITH REMOTES
	Clone a Repository
	Adding Remotes
	Showing Remotes
	Inspect a Remote
	Fetch Data from Remote
	Push to Remote
	Renaming Remotes
	Deleting Remotes
ADD FILES FOR TRACKING
STAGE A FILE
VIEW STATUS
	View Changes Unstaged
	View Changes Staged
COMMIT CHANGES
UNDOING THINGS
	Redoing a Commit
	Unstage a File
	Unmodifying a Modified File
REMOVE FILES
MOVE FILES
IGNORE FILES
TAGS
	List Tags
	Create Annotated Tags
	Create Lightweight Tags
	Sharing Tags
VIEW LOG



CONFIGURATIONS

git config --global user.name "Pedro Manjarrez"

--system (/etc/gitconfig)
--global (~/.gitconfig)
         (.git/config)

user.name
user.email
merge.tool
color....
core.editor
alias.co commit



INITIATE A REPOSITORY

In directory that has files you want to track
git init



WORKING WITH REMOTES

Clone a Repository
git clone <url> (<dir_name>)

Adding Remotes
git remote add <shortname> <url>

Showing Remotes
git remote -v

Inspect a Remote
git remote show <remote>

Fetch Data from Remote
git fetch <remote name>
	it doesn't merge changes
git pull 
	pull and merge changes from remote branch

Push to Remote
git push <remote> <branch>

Renaming Remotes
git remote rename <old> <new>

Deleting Remotes
git remote rm <name>



ADD FILES FOR TRACKING

git add <file>



STAGE A FILE

git add <file>



VIEW STATUS

git status
-v, --verbose         be verbose
-s, --short           show status concisely
-b, --branch          show branch information
--porcelain           machine-readable output
--long                show status in long format (default)
-z, --null            terminate entries with NUL
-u, --untracked-files[=<mode>]
                      show untracked files, optional modes: all, normal, no. (Default: all)
--ignored             show ignored files
--ignore-submodules[=<when>]
                      ignore changes to submodules, optional when: all, dirty, untracked. (Default: all)
--column[=<style>]    list untracked files in columns

View Changes Unstaged
git diff (<file>)
- compares against staged or commited

View Changes Staged
git diff --staged (<file>)



COMMIT CHANGES

git commit

git commit -a
- commit unstaged changes



UNDOING THINGS

Redoing a Commit
git commit --amend
- redo the last commit but reading the staging area again
	you can make changes like (will result in a single commit)
		git commit
		git add file.txt
		git commit --amment

Unstage a File
git reset HEAD <file>

Unmodifying a Modified File
git checkout -- <file>



REMOVE FILES

git rm
- marks to delete in staging area (also deletes from disk)

rm
git add/rm
- need to tell git to remove the file



MOVE FILES

git mv <old> <new>



IGNORE FILES

Create .gitignore file



TAGS

List Tags
git tag

Create Annotated Tags
git tag -a <name>

Create Lightweight Tags
git tag <name>

Tag Later
git tag -a <name> <checksum>

Sharing Tags
git push origin <tag>
git push origin --tags
	pull all your tags



VIEW LOG

git log

-p		Show the patch introduced with each commit.
--word-diff	Show the patch in a word diff format. (you have to use -p)
--stat		Show statistics for files modified in each commit.
--shortstat	Display only the changed/insertions/deletions line from the --stat command.
--name-only	Show the list of files modified after the commit information.
--name-status	Show the list of files affected with added/modified/deleted information as well.
--abbrev-commit	Show only the first few characters of the SHA-1 checksum instead of all 40.
--relative-date	Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.
--graph		Display an ASCII graph of the branch and merge history beside the log output.
--pretty	Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
--oneline	A convenience option short for --pretty=oneline --abbrev-commit.
--format	Shorthand for --pretty=format

git log --pretty=<oneline|short|full|fuller>
- other predefined formats

git log --pretty=format:"%h ..."
- personalized format
%H	commit hash
%h	abbreviated commit hash
%T	tree hash
%t	abbreviated tree hash
%P	parent hashes
%p	abbreviated parent hashes
%an	author name
%aN	author name (respecting .mailmap, see linkgit:git-shortlog[1] or linkgit:git-blame[1])
%ae	author email
%aE	author email (respecting .mailmap, see linkgit:git-shortlog[1] or linkgit:git-blame[1])
%ad	author date (format respects --date= option)
%aD	author date, RFC2822 style
%ar	author date, relative
%at	author date, UNIX timestamp
%ai	author date, ISO 8601 format
%cn	committer name
%cN	committer name (respecting .mailmap, see linkgit:git-shortlog[1] or linkgit:git-blame[1])
%ce	committer email
%cE	committer email (respecting .mailmap, see linkgit:git-shortlog[1] or linkgit:git-blame[1])
%cd	committer date
%cD	committer date, RFC2822 style
%cr	committer date, relative
%ct	committer date, UNIX timestamp
%ci	committer date, ISO 8601 format
%d	ref names, like the --decorate option of linkgit:git-log[1]
%e	encoding
%s	subject
%f	sanitized subject line, suitable for a filename
%b	body
%B	raw body (unwrapped subject and body)
%N	commit notes
%gD	reflog selector, e.g., `refs/stash@\{1\}`
%gd	shortened reflog selector, e.g., `stash@\{1\}`
%gs	reflog subject
%Cred	switch color to red
%Cgreen	switch color to green
%Cblue	switch color to blue
%Creset	reset color
%C(...)	color specification, as described in color.branch.* config option
%m	left, right or boundary mark
%n	newline
%%	a raw '%'
%x00	print a byte from a hex code
%w([<w>[,<i1>[,<i2>]]])	switch line wrapping, like the -w option of linkgit:git-shortlog[1].

Limiting the Output

-(n)			Show only the last n commits
--since, --after	Limit the commits to those whose CommitDate was made on-or-after the specified date/time.
--until, --before	Limit the commits to those whose CommitDate was made on-or-before the specified date/time.
--author		Only show commits in which the author entry matches the specified string.
--committer		Only show commits in which the committer entry matches the specified string.
--grep			Search keywords in commit message.
				Using multiple is like OR
				Adding --all-match is like AND

Date Formats Allowed
--since=2.weeks
--since="2008-01-15”
--since=“2 years 1 day 3 minutes ago”
...

Date Format
--date=iso
--date=rfc
--date=raw	seconds since epoch
--date=local
